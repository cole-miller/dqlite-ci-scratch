name: End-to-end tests
on:
  workflow_call:
    inputs:
      raft-repo:
        type: string
        required: false
      raft-branch:
        type: string
        required: false
      dqlite-repo:
        type: string
        required: false
      dqlite-branch:
        type: string
        required: false
      go-dqlite-repo:
        type: string
        required: false
      go-dqlite-branch:
        type: string
        required: false
      workloads:
        type: string
        required: true
      nemeses:
        type: string
        required: true
      disk:
        type: string
        required: true
      extra-jepsen-opts:
        type: string
        required: false
      check-raft:
        type: boolean
        required: true
      check-dqlite:
        type: boolean
        required: true
      check-go-dqlite:
        type: boolean
        required: true

env:
  DEBIAN_FRONTEND: noninteractive
  LIBRAFT_TRACE: 1
  LIBDQLITE_TRACE: 1

jobs:
  build-and-test:
    strategy:
      fail-fast: false
      matrix:
        workload: ${{ fromJSON(inputs.workloads) }}
        nemesis: ${{ fromJSON(inputs.nemeses) }}
        disk: ${{ fromJSON(inputs.disk) }}
    runs-on: ubuntu-22.04
    steps:
      - name: Check out code
        run: |
          git clone --depth 1 --branch ${{ inputs.raft-branch || 'master' }} ${{ inputs.raft-repo || 'https://github.com/canonical/raft' }} raft
          git clone --depth 1 --branch ${{ inputs.dqlite-branch || 'master' }} ${{ inputs.dqlite-repo || 'https://github.com/canonical/dqlite' }} dqlite
          git clone --depth 1 --branch ${{ inputs.go-dqlite-branch || 'master' }} ${{ inputs.go-dqlite-repo || 'https://github.com/canonical/go-dqlite' }} go-dqlite
          git clone --depth 1 https://github.com/canonical/jepsen.dqlite
      - name: Install apt dependencies
        run: |
          sudo apt update
          sudo apt-get install \
            gcc \
            gnuplot \
            graphviz \
            leiningen \
            libjna-java \
            liblz4-dev \
            libsqlite3-dev \
            libuv1-dev
      - name: Install Go toolchain
        uses: actions/setup-go@v3
      - name: Check raft
        if: ${{ inputs.check-raft }}
        run: |
          cd raft
          autoreconf -i
          ./configure --enable-debug --enable-uv
          make -j$(nproc) check
      - name: Install raft (fast)
        run: |
          shopt -s globstar
          cd raft
          gcc -shared -fPIC -g3 -D_GNU_SOURCE -DLZ4_AVAILABLE -DLZ4_ENABLED -DHAVE_LINUX_AIO_ABI_H src/**/*.c -o libraft.so -luv -llz4
          sudo install -m644 include/raft.h /usr/include
          sudo install -d /usr/include/raft
          sudo install -m644 include/raft/uv.h /usr/include/raft
          sudo install -m644 include/raft/fixture.h /usr/include/raft
          sudo install -m644 libraft.so /usr/lib
        shell: bash
      - name: Check dqlite
        if: ${{ inputs.check-dqlite }}
        env:
          RAFT_CFLAGS: -I/usr/include
          RAFT_LIBS: -L/usr/lib -lraft
        run: |
          cd dqlite
          autoreconf -i
          ./configure --enable-debug
          make -j$(nproc) check
      - name: Install dqlite (fast)
        run: |
          shopt -s globstar
          cd dqlite
          gcc -shared -fPIC -g3 -D_GNU_SOURCE src/**/*.c -o libdqlite.so -lsqlite3 -lraft
          sudo install -m644 include/dqlite.h /usr/include
          sudo install -m644 libdqlite.so /usr/lib
        shell: bash
      - name: Check go-dqlite
        if: ${{ inputs.check-go-dqlite }}
        run: |
          cd go-dqlite
          go test -tags nosqlite3 ./...
      - name: Prepare for Jepsen
        run: |
          printf core | sudo tee /proc/sys/kernel/core_pattern
      - name: Run Jepsen tests
        run: |
          cd jepsen.dqlite
          echo 'replace github.com/canonical/go-dqlite => ../go-dqlite' >>go.mod
          go get golang.org/x/sync/semaphore
          go build -tags nosqlite3 -o resources/app resources/app.go
          sudo ufw disable
          sleep 0.2
          sudo systemctl stop ufw
          sudo ./resources/network.sh setup 5
          lein run test --no-ssh --binary $(pwd)/resources/app \
            --workload append \
            --nemesis stop \
            --rate 100 \
            --time-limit 240 \
            --disk 0
          sudo ./resources/network.sh teardown 5

